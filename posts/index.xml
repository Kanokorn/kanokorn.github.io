<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on May Chongnguluam</title>
    <link>https://kanokorn.github.io/posts/</link>
    <description>Recent content in Posts on May Chongnguluam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Aug 2019 21:22:20 +0700</lastBuildDate>
    
	<atom:link href="https://kanokorn.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Variables, objects, and references in Ruby</title>
      <link>https://kanokorn.github.io/posts/variables-objects-and-references-in-ruby/</link>
      <pubDate>Sat, 24 Aug 2019 21:22:20 +0700</pubDate>
      
      <guid>https://kanokorn.github.io/posts/variables-objects-and-references-in-ruby/</guid>
      <description>วันนี้นั่งอ่านหนังสือ The well-grounded rubyist ของ David A.Black and Joseph Leo เจอหัวข้อที่น่าสนใจที่จะมาแชร์ให้ฟัง เป็นเรื่องของการกำหนดตัวแปรในภาษา Ruby
มาเริ่มกันที่โค้ดนี้เลยค่ะ ผลลัพธ์จะได้อะไรเอ่ย
str = &amp;quot;Hello&amp;quot; abc = str str.replace(&amp;quot;Goodbye&amp;quot;) puts str puts abc  จะได้แบบนี้ค่ะ
Goodbye Goodbye  เอ&amp;hellip; ทำไมตัวแปร abc ถึงเปลี่ยนค่าได้ล่ะ เราเปลี่ยนค่าที่ตัวแปร str อย่างเดียวนี่นา
คำตอบก็คือ เวลาที่เรากำหนดค่าให้ตัวแปร มันจะ copy reference ของ object str ไปให้ abc มันจะไม่ได้ copy value ไปนั่นเอง
ถ้าทำเป็นภาพให้เข้าใจง่ายๆ ก็คือตัวแปร str และ abc มันแค่ชี้ไปที่กล่องข้อมูลอันเดียวกัน
ทีนี้ถ้าเรามีการเปลี่ยนแปลงกล่องข้อมูลที่มีข้อความ Hello อยู่ไปเป็นค่าอื่นเช่น การเรียก method replace ผ่านตัวแปร str
เวลาเราแสดงค่า abc เราก็จะเห็นค่าเปลี่ยนไปด้วย เพราะสองตัวแปรนี้มันชี้ไปที่ object ตัวเดียวกันนั่นเอง</description>
    </item>
    
    <item>
      <title>Test refactoring with Table-driven</title>
      <link>https://kanokorn.github.io/posts/test-refactoring-with-table-driven/</link>
      <pubDate>Sat, 24 Aug 2019 18:17:47 +0700</pubDate>
      
      <guid>https://kanokorn.github.io/posts/test-refactoring-with-table-driven/</guid>
      <description>I used table-driven to refacotor my code. The output is now easier to add more test cases without having to create a new test case. We only need to add input and output. Also easier to read.</description>
    </item>
    
  </channel>
</rss>